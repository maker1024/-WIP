apply plugin: 'com.android.application'

android {
    compileSdkVersion Integer.parseInt(compileSdk)
    buildToolsVersion String.valueOf(buildTools)
    defaultConfig {
        applicationId "com.anights.wip"
        minSdkVersion Integer.parseInt(minSdk)
        targetSdkVersion Integer.parseInt(targetSdk)
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    dataBinding {
        enabled true
    }

    signingConfigs {
        release {
            keyAlias 'anightswip'
            keyPassword '123456'
            storeFile file(rootProject.file('wip_release.keystore'))
            storePassword '123456'
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled false
            signingConfig signingConfigs.release
        }

        release {
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    /*针对app的输出文件改名*/
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
////            def fullName = output.outputFile.name
//            def fileName = "csp" +
//                    "_${defaultConfig.versionName}" +
////                    "_${defaultConfig.versionCode}" +
////                    "_${variant.flavorName}" +
//                    "_${variant.buildType.name}" +
//                    new Date().format("yyyyMMddHHmmss") +
//                    ".apk"
//            if (project.hasProperty('IS_TEST')) {
//                fileName = "test_" + fileName
//            }
            outputFileName = "WIP.apk"
        }
    }

    testOptions {
        reportDir "$rootDir/test-reports"
        resultsDir "$rootDir/test-results"
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(path: ':bundle_platform')
    if (!isSingleModuleRunning.toBoolean()) {
        implementation project(path: ':bundle_main')
        implementation project(path: ':bundle_platform')
    }
    implementation "androidx.appcompat:appcompat:$appcompat"

    androidTestImplementation "androidx.test.ext:junit:$androidJunit"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoCore"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espressoCore"

    testImplementation "junit:junit:$junit"
    testImplementation "androidx.room:room-testing:$room"
    testImplementation "com.jraska.livedata:testing:$livedataTesting"
    testImplementation "androidx.arch.core:core-testing:$coreTesting"
    testImplementation "org.robolectric:robolectric:$robolectric"
    testImplementation "androidx.test:core:1.2.0"
    testImplementation "androidx.test.ext:junit:$androidJunit"
    testImplementation "androidx.test.espresso:espresso-core:$espressoCore"
    testImplementation "androidx.test.espresso:espresso-intents:$espressoCore"
    testImplementation "androidx.test.ext:truth:1.2.0"
    testImplementation "org.powermock:powermock-api-mockito2:2.0.2"
    testImplementation "org.powermock:powermock-module-junit4:2.0.2"
    testImplementation "org.powermock:powermock-api-support:2.0.2"
}
